git checkout master // se vrakame na master
git merge bug123// spojuva (samo so fast forward)
git rebase master // rekurzivno spojuva granka so master 
git pull origin //prezemame se sto ima na origin repoto == kombinacija od 2 komandi fetch + merge
git rebase master //temp
git push origin //gi prikacuva promenite
git add --all // dodaj gi site novi i site modificirani fajlovi
git commit -m "Add fajls"
git log // gi dava site komiti
git diff // gi davame site razliki pomegu fajlovi sto ne se staged od posledniot komit sto sme go napravile
git reset HEAD LICENCE // resetiraj mi go fajlot licence kako poslednata verzija
git checkout --LICENCE // gi briseme site promeni
git commit -a -m "Modify readme" // gi dodava site fajlovi sto se tracked, em gi dodava em gi komitnuva, no ako fajlot e samo dodaden bez komit, toj nema da bide dodaden(negativna osobina)
git reset --soft HEAD^ // reset into staging , se vrakame na stage fazata,  fajlot od komitnat se vraka vo modified (na scena)
git pull // se prezemame od origin/master

git reset --soft HEAD^ //vrati mi se na posledniot komit, a stavi gi site promeni sto gi imam napraveno vo staged
git commit --amend -m "New message" // se sto sum stavil novo vo staged area , go zalepuvam na posleniot komit, so toa ke se promeni porakta na posledniot komit
git reset --hard HEAD^ // ke gi izbrise site promeni a nie ke se vratime na posledniot komit
git reset --hard HEAD^^ // dva komiti pozadi head , drugoto ke prebrise

git remote //dodavame novi repozitoriumi




kAKO DA STAVAM FAJL NA GIT HUB??
1)kreiram fajl so desen klik :)
2)git add fajl.txt
3)git commit -m "fajlot e komitnat"
4)git branch -M main
5)git remote add origin <link>
6)git push -u origin main
treba da e vo red


git remote -v // gi listame site repozitoriumi sto gi imame 
git remote rm <name> // trgame repozitorium
gir push -u <name> <branch> //to push to remotes
git clone // go downloadira celiot repozitorium i go dodava na origin repozitoriumot
git branch cat // kreira branch
git branch //gi lista site branchovi
git checkout cat // ke se prefrlime na cat branchot
git add cat.txt, git commit -m "Create quantum cat"
git checkout master
git log / git status
git merge cat // fast forward dodavanje, vozmozno samo koga imame razlika pomegu dvete granki
gir branch -d name // brise granka! 
git checkout -b admin (da vidime koga FF nema da raboti)
git add, git commit -m..
git checkout master
git branch
git pull (za svaku slucaj)
git add store.rb
git commit -m "Fix bug"
git push (stavi na master)
git checkout admin, pravi nesto
git checkout master
git merge admin (nema da bide ednostavno spojuvanje, ke se otvori editor za da napiseme poraka za merging)
(rekurzivno spojuvanje)
:wq (+ enter) // don't panic


KOLABORACIJA
jane i greg rabotat na ist proekt, greg nema postaveno nisto na server pa so cel da rabotat zaedno potrebno e greg da go pushne na nekoj server, a jane da povika git clone <linl>,
so toa ke mozat da rabotat na istiot proekt.

*Koga imame conflict git avtomatski gi modificira, gi pokazuva porakite, nie mora da gi sredeme konfliktite.Ke gi vidime dvete poraki, ke ja izbriseme ednata i taa ostanatata ke bide pullnata
odkako gi popravivme komitite povikuvame:
git commit -a -m "Merged commit"



git checkout -b bugfix // kreira i premestuva na noviot branch
git push origin :shopping_cart // izbrisi go remote branchot
git branch -d shopping_cart // lokalno brisenje
git branch -D shopping_cart // force deleting
git remote prune origin //gi briseme remote branchovite sto gi sledime a ne postojat
git push heroku-staging staging // se naogame momentalno na staging, ova nema da raboti bidejki prifaka samo master
git push heroku=staging staging:master//vaka go izveduvame :D , ja zema celata sodrzina sto ja ima na brach i ja pushnuva na master

TAGGING // pokazuvac kon nekoj komit
git tag // gi listame site verzii
git checkout v0.0.1 // se vrakame na verzija
git tag -a v0.0.3 -m "version 0.0.3" //dodavame nova verzija
git push --tags //kazuvame deka gi objavuvame na git hub samo tagiranjata na nasiot proekt

KAKO SE PRAVI TAG?
git tag // listame da gi vidime tagovite
git tag -a v0.0.1 -m "tag created" // kreirame tag
git push --tag // go pushnuvame tagot


!!!!!!!! NE USPEAV DA NAPRAVAM VERSIONDOCUMENT NA V0.0.2

git restore --staged <file>// to unstage



FROM SCRATCH:
mkdir Nov
cd Nov
git init
notepad fajl.txt
git add fajl.txt / git add .
git status (staged, to be commited)
git commit -m "Prv komit vo noviot folder"
git status (nothing to commit)
notepad B.txt
notepad C.txt
git status (untracked 2 fajla)
git add .
git commit -m "Vtor commit" (2 files changed, 2 insertions)
git branch
git branch bug123 / git checkout -b bug123 (kreiraj granka)
git checkout bug123 (prefrli se na grankata)
git add D.txt
git add E.txt
git commit -m "Staj na novata granka"
git checkout master
git merge bug123 (spoj gi commits od bug123 so master, fast-forward)
git branch -d bug123 (najprosto brisenje)
git checkout -b bug456 (nova granka)
notepad F.txt
git add F.txt
git commit -m "Fajl F"
notepad G.txt
git add G.txt
git commit -m "Fajl G"
git checkout master
git merge bug456 (spoj gi F i G so masterot)
git branch -d bug456 (izbrisi ja grankata)
-------------------------------------------
git remote add origin https://github.com/miladodevska/Vezbam19.03.git (dodaj go remote na github)
git remote -v (fetch i push, lista repos)
git clone https://github.com/miladodevska/Vezbam19.03.git (mi vika You appear to have cloned an empty repository)
git pull
git remote -v
git push -u origin master
-------------------------------------------
git add LICENSE.txt
git status
git diff
git add LICENSE.txt (ako napraime add na izmenetata verzija), git diff (nema da vrati nisto), mora git diff --staged!
git reset HEAD LICENSE.txt (u slucaj ako posledniot change nema blage veze, vrati se na poslednata stabilna verzija)
git checkout -- LICENSE.txt (undo na site promeni)
git reset --soft HEAD^ (ke se vratime na stage fazata, undo last commit)
git add todo.txt
git commit --amend -m "Modify readme &add todo.txt"(prilepi nesto na posledniot commit, na HEAD ke mu go dodade todo.txt, so toa ke go neame ovoj commit)
git reset --hard HEAD^ (undo last commit & all changes)
git reset --hard HEAD^^ (undo posledni 2 commits)
---------------------
RABOTA SO REMOTES
git remote add origin <URLaddress> (dodadi nov remote)
git remote rm <imenaremote ili origin> (to remove remotes)
git push -u <name ili origin>  <master> (stavi gi promenite, -u e za usptream)
-----------
POSLE PUSH NE SMEAT OVIE:
git reset --soft HEAD^
git commit --amend -m "Message"
git reset --hard HEAD^
git reset --hard HEAD^^
----------------------------
COLLABORATING
git remote -v // gi listame site repozitoriumi sto gi imame 
git remote rm <name> // trgame repozitorium
gir push -u <name> <branch> //to push to remotes
git clone // go downloadira celiot repozitorium i go dodava na origin repozitoriumot
git branch cat // kreira branch
git branch //gi lista site branchovi
git checkout cat // ke se prefrlime na cat branchot
git add cat.txt, git commit -m "Create quantum cat"
git checkout master
git log / git status
git merge cat // fast forward dodavanje, vozmozno samo koga imame razlika pomegu dvete granki
gir branch -d name // brise granka! 
git checkout -b admin (da vidime koga FF nema da raboti)
git add, git commit -m..
git checkout master
git branch
git pull (za svaku slucaj)
git add store.rb
git commit -m "Fix bug"
git push (stavi na master)
git checkout admin, pravi nesto
git checkout master
git merge admin (nema da bide ednostavno spojuvanje, ke se otvori editor za da napiseme poraka za merging)
(rekurzivno spojuvanje)
:wq (+ enter) // don't panic
--------------------------------------------
AV 4 GIT REAL 4,5,6
Jane: git clone <link od repo>
git status
git add --all
git commit -m "Add 2 files to stage mode"
git push
Greg: git commit -am "Update the file"
(Sega imame commits na isto nivo)
git push (rejected! ne moze da se zapise vrz commitot na Jane)
git pull (made by recursive strategy)
git push (success!)

RABOTA SO BRANCHES:
git branch -r (izlistaj gi site remote branches)
git remote show origin (origin e ime na remote repo so koj sme povrzani, dava info za origin)
git checkout -b bugfix // kreira i premestuva na noviot branch
git push origin :shopping_cart // izbrisi go remote branchot
git branch -d shopping_cart // lokalno brisenje
git branch -D shopping_cart // force deleting
git remote prune origin //gi briseme remote branchovite sto gi sledime a ne postojat
git push heroku-staging staging // se naogame momentalno na staging, ova nema da raboti bidejki prifaka samo master
git push heroku-staging staging:master//vaka go izveduvame :D , ja zema celata sodrzina sto ja ima na branch i ja pushnuva na master
(lokalniot branch staging pushni go na master)

TAGGING // pokazuvac kon nekoj komit
git tag // gi listame site verzii
git checkout v0.0.1 // se vrakame na verzija
git tag -a v0.0.3 -m "version 0.0.3" //dodavame nova verzija
git push --tags //kazuvame deka gi objavuvame na git hub samo tagiranjata na nasiot proekt

KAKO SE PRAVI TAG?
git tag // listame da gi vidime tagovite
git tag -a v0.0.1 -m "tag created" // kreirame tag
git push --tag // go pushnuvame tagot
----------------------------------------------------------
AV 5:
git log --oneline (isto ko git log samo pokratko)
git checkout unicorns
git rebase master (od unicorns staj gi u temp, izvrsi gi site od main, pa na kraj izvrsi od uncorns, spajanje rekurzivno)
git rebase -i HEAD~3 (vrati 3 commits nazad, ke ti se otvori editor, so ova HEAD~3 ustv gi menjame samo porakite na commits)
git rebase -i HEAD (nemam pojma za sho e, ama neso dava error nema komiti posle HEAD)
git rebase -i HEAD^ (parentot na head, interaktiven rebase)
git log --oneline (sea sakam da gi smenam dvata komiti)
git rebase -i HEAD~3 (sea ke se otvori editor, samo smeni gi mestata so copy paste i moli se da uspee!)
git log -- oneline (sea proveri sto si smenil, ke treba da gi razdvoime komitite)
//so nekakov HEAD mora da go otvorime editorot, namesto pick stavame edit i neso kao pisuvame use eden commit
git reset HEAD^ (ama prvo treba da se undo changes ?)
git commit -a -m
git commit -a -m (mora da gi commitneme dvata fajla)
git rebase --continue (sme zavrsile)
git log --oneline (tuka ke vidime deka od eden komit sea se dva)
git rebase -i HEAD~4 (cekajte malce drugari, sea pak da gi vratime kako 1)
//namesto pick, na posledniot komit staj mu squash, za da se spoi so pretposledniot i staj samo edna poraka
git log --oneline (sea ke vidime deka nemame 4 komiti, tuku samo 3)
---------------------------------------------------------------------
STASHING:
git diff (Greg raboti na granka gerbils ama mora da popravi nesto odma na master)
git stash save (vo temp takozvani stash go stava toa so go rabotel na gerbils)
git diff (ne dava nisto sea)
git status (nothing to commit)
git checkout master (poprava neso)
git pull (e zaso e sea git pull ziti sve?)
git checkout gerbils (vrakjaj se)
git stash apply (povrati nazad toa so bilo vo stash)
git diff (gi pokazuva promenite vo datotekata )
git stash list (0,1,2 - gi lista fajlovite vo stashot)
git stash apply stash@{1} (ako sakas da izvadis konkreten stash file)
git stash list (a stash has been applied but it's still here)
git stash drop (delete od listata)
git stash list (sea vekje go nema stashot)

git stash pop = git stash apply + git stash drop (izvadi go toj na vrvot i izbrisi go od listata vo stash)
CONFLICTS:
git stash apply (error)
git reset --hard HEAD (konfliktot moze da se resi so nov commit ili so reset)
git stash apply (ima changes not staged for commit)

git stash pop (ako go koristis pop i ima konflikt)
git stash list (ke ti go pojavi stashot kaj so ima frka)
git stash drop (mora racno da se izbrise od listata)
KEEP INDEX:
git status (ima eden to be commited i eden modified- not staged)
git stash save (ama ova ke gi stavi site na stash,a nie sakame samo toj so e unstaged)
git status (ke rece nothing to commit)
git stash pop (za da gi vrati go pravi ova)
git stash save --keep-index (tie sto se vo staged nema da bidat stashed, samo tie so se unstaged)
git status (changes to be commited:...)
git commit -m "dfkjdhHY"
git stash pop (unstaged files mozeme da gi izvadime od stash)

git stash save (samo tracked files ke se stashnat)
git status (ke pokaze untracked files)
git stash save --include-untracked (da se stashnat i untracked)
git status (nothing to commit)
git stash list (basic listanje)
git stash list --stat (ke gi prikaze promenite na fajlovite detalno)
git stash show stash@{0} (promenite na samo eden fajl)
git stash show (da zememe podatoci za vrvot na stekot)
git stash show --patch (prikazuva promeni vo fajlovite na stash)

git stash save "Add nesho"
git stash list
git stash save "Start "
git branch -d gerbils (ova demek nesakajki go prai)
git stash branch gerbil-toys stash@{0} (avtomatik rolomatik nova granka praime)
git commit -am "swsgydh"

git stash list (ke gi izlista site, pa i tie sho ne ni trebaat)
git stash clear (iscisti se!)
git stash list (prazno)

